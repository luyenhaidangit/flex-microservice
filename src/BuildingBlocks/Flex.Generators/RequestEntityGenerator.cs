using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace Flex.Generators
{
    [Generator]
    public class RequestEntityGenerator : ISourceGenerator
    {
        public void Initialize(GeneratorInitializationContext context)
        {
            // Đăng ký syntax receiver để quét class
            context.RegisterForSyntaxNotifications(() => new ApprovalEntitySyntaxReceiver());
        }

        public void Execute(GeneratorExecutionContext context)
        {
            if (context.SyntaxReceiver is not ApprovalEntitySyntaxReceiver receiver)
                return;

            var compilation = context.Compilation;

            foreach (var classDecl in receiver.Candidates)
            {
                var model = compilation.GetSemanticModel(classDecl.SyntaxTree);
                var symbol = model.GetDeclaredSymbol(classDecl) as INamedTypeSymbol;

                if (symbol == null) continue;

                // Check có kế thừa ApprovalEntityBase<TKey>
                var baseType = symbol.BaseType;
                if (baseType == null || !baseType.IsGenericType) continue;

                if (baseType.OriginalDefinition.ToDisplayString() != "Flex.Shared.SeedWork.Workflow.ApprovalEntityBase<TKey>")
                    continue;

                // Lấy TKey
                var keyType = baseType.TypeArguments[0].ToDisplayString();

                var entityName = symbol.Name; // User, NotificationTemplate,...
                var ns = symbol.ContainingNamespace.ToDisplayString();
                var requestName = entityName + "Request";

                var source = $@"
// <auto-generated />
using Flex.Shared.SeedWork.Workflow;

namespace {ns}
{{
    public class {requestName} : RequestBase<{keyType}>
    {{
    }}
}}
";
                context.AddSource($"{requestName}.g.cs", source);
            }
        }
    }

    class ApprovalEntitySyntaxReceiver : ISyntaxReceiver
    {
        public List<ClassDeclarationSyntax> Candidates { get; } = new();

        public void OnVisitSyntaxNode(SyntaxNode syntaxNode)
        {
            if (syntaxNode is ClassDeclarationSyntax classDecl)
            {
                if (classDecl.BaseList != null && classDecl.BaseList.Types.Count > 0)
                {
                    Candidates.Add(classDecl);
                }
            }
        }
    }
}
