# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python3. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python3 tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python3 tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python3 ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```bash
venv/bin/python3 ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```bash
venv/bin/python3 ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Always use (activate) it when doing python development. First, to check whether 'uv' is available, use `which uv`. If that's the case, first activate the venv, and then use `uv pip install` to install packages. Otherwise, fall back to `pip`.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.
- Không tự tạo seed (permissions/users/roles/…) nếu không có yêu cầu rõ ràng từ PO. Đặc biệt: KHÔNG seed quyền `USERS.*` mặc định trừ khi được yêu cầu.
- Mapping entity: Sử dụng EF Core Fluent API qua `IEntityTypeConfiguration<T>` để định nghĩa bảng/cột/index/quan hệ. KHÔNG dùng DataAnnotations (`[Table]`, `[Column]`, `[StringLength]`, …) trên entity.
- EF Core/Identity entities: không dùng `required` cho property vì framework khởi tạo bằng reflection; dùng `= default!` cho non-null reference và ràng buộc bằng FluentValidation/EF Fluent API (`.IsRequired()` nếu cần schema). Dùng required: cho DTO / domain model mà bạn kiểm soát việc khởi tạo, muốn ép buộc compile-time.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When searching for recent news, use the current year (2025) instead of previous years, or simply use the "recent" keyword to get the latest information
- **CRITICAL**: Luôn kiểm tra và thêm đầy đủ `using` directives khi tạo file C# mới. Đặc biệt chú ý:
  - `using Flex.Contracts.Domains.Interfaces;` cho `IRepositoryBase`
  - `using Flex.Infrastructure.Common.Repositories;` cho repository base classes
  - `using Flex.AspNetIdentity.Api.Persistence;` cho DbContext
  - `using Flex.AspNetIdentity.Api.Entities;` cho entities
  - `using Microsoft.EntityFrameworkCore;` cho EF Core operations
  - `using MassTransit;` cho message bus operations
  - `using AutoMapper;` cho mapping operations
  - `using Microsoft.Extensions.Logging;` cho logging
- **CRITICAL**: Sử dụng đúng method names cho Repository pattern:
  - `CreateAsync()` thay vì `AddAsync()` cho việc thêm entity mới
  - `UpdateAsync()` cho việc cập nhật entity
  - `DeleteAsync()` cho việc xóa entity
  - `GetByIdAsync()` cho việc lấy entity theo ID
- **CRITICAL**: Khi repository cung cấp phương thức `SaveChangesAsync()`, hãy sử dụng `await repository.SaveChangesAsync();` thay vì `await unitOfWork.SaveChangesAsync();` để lưu các thay đổi liên quan đến repository đó.
- **CRITICAL**: Repository pattern trong project này yêu cầu:
  - Constructor nhận 2 parameters: `(IdentityDbContext context, IUnitOfWork<IdentityDbContext> unitOfWork)`
  - Gọi base constructor: `: base(context, unitOfWork)`
  - Khai báo private field: `private readonly IdentityDbContext _context;`
  - Gán context trong constructor: `_context = context;`
  - Sử dụng `_context` thay vì access trực tiếp từ base class

## Project-specific Lessons

- Tránh xung đột tên `PagedResult<>` giữa `Flex.Shared.SeedWork.PagedResult<T>` và `System.Linq.Dynamic.Core.PagedResult<TSource>`: luôn fully-qualify `Flex.Shared.SeedWork.PagedResult<T>` trong chữ ký method hoặc loại bỏ `System.Linq.Dynamic.Core` khỏi `using`. Ưu tiên sử dụng `QueryableExtensions.ToPagedResultAsync(request)` để paging thay vì tự `OrderBy` với Dynamic LINQ khi không cần thiết.
- Không xoá comment cũ nếu thay đổi code không làm thay đổi ý nghĩa comment; chỉ bổ sung comment mới khi cần làm rõ thay đổi. Giữ nguyên các template comment dạng "===== ... =====".
- API không trả dữ liệu phải trả `Ok(Result.Success(message: "..."))` thay vì `NoContent()`.

## Scratchpad Notes
- UserRepository: dùng `ToPagedResultAsync` để tránh Dynamic LINQ và resolve ambiguous `PagedResult<>`.
 - Nếu không có yêu cầu rõ ràng về sort fields, để `OrderByMappings` rỗng trong `PagingRequest` (không map mặc định) nhằm tránh nhầm lẫn về tiêu chí sắp xếp.

# Playbook: Luồng triển khai chức năng quản lý (ví dụ: User)

- Mục tiêu: Chuẩn hoá quy trình thêm một module quản lý theo mô hình maker-checker, tái sử dụng tối đa hạ tầng sẵn có.

- 1) Entities
  - Khai báo entity chính: `<Entity>` (ví dụ `User`). Không dùng DataAnnotations; ràng buộc bằng FluentValidation/EF Fluent API.
  - Khai báo entity yêu cầu duyệt: `<Entity>Request : RequestBase<long>` (ví dụ `UserRequest`).

- 2) EF Core Configurations
  - `<Entity>Configuration : IEntityTypeConfiguration<...>`: đặt tên bảng UPPER_SNAKE_CASE số nhiều (ví dụ `USERS`), cấu hình cột/kiểu dữ liệu, index, quan hệ.
  - `<Entity>RequestConfiguration : RequestBaseConfiguration<<Entity>Request, long>`: `builder.ToTable("<ENTITY>_REQUESTS")` (ví dụ `USER_REQUESTS`).
  - Tận dụng `RequestBaseConfiguration` để map sẵn các cột chung: `ACTION`, `STATUS`, `REQUESTED_DATA`, `MAKER_ID`, `REQUESTED_DATE`, ...

- 3) DbContext
  - Thêm `DbSet<<Entity>>` và `DbSet<<Entity>Request>` nếu cần truy vấn trực tiếp; `ApplyConfigurationsFromAssembly` sẽ tự áp dụng cấu hình.

- 4) Repository
  - Interface: `I<Entity>Repository` (mở rộng theo nhu cầu nghiệp vụ) và/hoặc `I<Entity>RequestRepository` nếu cần thao tác riêng.
  - Implementation: kế thừa `RepositoryBase<TEntity, TKey, IdentityDbContext>` (ví dụ `RepositoryBase<UserRequest, long, IdentityDbContext>`).

- 5) DTOs & Validators
  - Tạo DTO cho create/update/delete/query. Chỉ dùng FluentValidation (không trộn DataAnnotations).
  - Quy ước: Request DTO cho maker tạo pending; Approved/Immediate DTO cho thao tác không cần duyệt.

- 6) Service (Application layer)
  - Interface: `I<Entity>Service` (và `I<Entity>AdminService` nếu tách CRUD immediate vs admin).
  - Thực thi maker-checker: thao tác cần duyệt -> ghi `<Entity>Request`; thao tác immediate -> dùng repository/manager thực thi trực tiếp.
  - Sử dụng `UserManager`/`RoleManager` cho entity thuộc Identity khi cần.

- 7) Controller (API)
  - Route: `api/<entities>`; gắn policy theo `Permissions.<AREA>.<ACTION>` (ví dụ `USERS.READ`, `USERS.CREATE`, ...).
  - Expose endpoint cho CRUD, approve/reject (nếu có request), các thao tác đặc thù (ví dụ assign-roles, lock/unlock...).

- 8) Đăng ký DI
  - `ServiceExtensions.AddInfrastructureServices`: `services.AddScoped<I<Entity>Service, EntityService>();`
  - Đăng ký repository tương ứng; AutoMapper profile; validators `AddValidatorsFromAssembly` nếu áp dụng.
  - Đảm bảo `AddEntityFrameworkStores<IdentityDbContext>()` cho các entity Identity.

- 9) Migration & Tên bảng/kiểu dữ liệu
  - Chuẩn hoá bảng: UPPER_SNAKE_CASE số nhiều; bảng request: `<ENTITY>_REQUESTS`.
  - Áp dụng converter nếu cần (ví dụ boolean -> `CHAR(1)` Y/N).
  - Tạo migration, chạy migrate trong pipeline khởi động.

- 10) Bổ sung
  - Logging/Audit cho thao tác admin; rate limit các endpoint nhạy cảm; 2FA nếu cần.
  - Mapping AutoMapper từ DTO -> entity/request và ngược lại.

- Gợi ý cấu trúc file (ví dụ trong Identity module)
  - `Entities/<Entity>.cs`, `Entities/<Entity>Request.cs`
  - `Persistence/Configurations/<Entity>Configuration.cs`, `.../<Entity>RequestConfiguration.cs`
  - `Repositories/Interfaces/I<Entity>Repository.cs`, `Repositories/<Entity>Repository.cs`
  - `Services/I<Entity>Service.cs`, `Services/<Entity>Service.cs`
  - `Controllers/<Entity>Controller.cs`

# Scratchpad
Goal: Triển khai API xem danh sách yêu cầu cho UserController theo pattern RoleController

[X] Phân tích cấu trúc RoleController để tham khảo
[X] Tạo các DTO cần thiết cho User requests:
  - UserPendingPagingDto: DTO cho danh sách pending requests
  - GetUserRequestsPagingRequest: Request cho phân trang
  - UserRequestDetailDto: DTO cho chi tiết request
  - UserDetailDataDto: DTO cho dữ liệu user trong request
  - UserRequestApprovalResultDto: DTO cho kết quả approve/reject
  - ApproveUserRequestDto: DTO cho approve request
  - RejectUserRequestDto: DTO cho reject request

[X] Cập nhật IUserService interface với các method mới:
  - GetPendingUserRequestsPagedAsync: Lấy danh sách pending requests
  - GetPendingUserRequestByIdAsync: Lấy chi tiết request
  - ApprovePendingUserRequestAsync: Approve request
  - RejectPendingUserRequestAsync: Reject request

[X] Triển khai các method trong UserService:
  - Xử lý phân trang và tìm kiếm
  - Parse JSON data từ RequestedData
  - Xử lý approve/reject với validation
  - Helper methods để extract data từ JSON

[X] Thêm các endpoint vào UserController:
  - GET /api/users/requests/pending: Danh sách pending requests
  - GET /api/users/requests/pending/{requestId}: Chi tiết request
  - POST /api/users/requests/pending/{requestId}/approve: Approve request
  - POST /api/users/requests/pending/{requestId}/reject: Reject request

[X] Kiểm tra compilation và fix lỗi

Implementation details:
- Tuân thủ pattern của RoleController
- Sử dụng RequestStatusConstant và RequestTypeConstant
- Xử lý JSON parsing an toàn với try-catch
- Validation đầy đủ cho tất cả endpoints
- Error handling với proper HTTP status codes
- Logging cho các thao tác quan trọng
- Tích hợp với existing UserService methods

[X] Discovery: Phân tích cấu trúc hiện tại của Flex.AspNetIdentity.Api
[X] Analysis: Hiểu yêu cầu - xây dựng base gRPC client theo bộ khung chuẩn
[X] Implementation: Cập nhật project file với các package gRPC cần thiết
[X] Configuration: Cập nhật appsettings.json với cấu hình gRPC
[X] Interceptors: Tạo các interceptor cho logging, auth, correlation ID
[X] Service Registration: Đăng ký gRPC clients với DI container
[X] Gateway Layer: Tạo các gateway service cho gRPC calls
[X] Health Check: Tích hợp health check cho gRPC services
[X] Testing: Kiểm tra functionality của gRPC client
[X] Proto Files: Cập nhật namespace và include tất cả proto files vào project

Progress notes:
[X] Phân tích cấu trúc hiện tại:
- Flex.AspNetIdentity.Api đã có Grpc.AspNetCore, Google.Protobuf, Grpc.Tools
- Có cấu hình GrpcSettings:SystemUrl trong appsettings.json
- Có comment code gRPC client cũ (đã bị comment out)
- Có cấu trúc Extensions/ServiceExtensions.cs theo pattern chuẩn
- Có System service với BranchService.proto sẵn sàng

[X] Yêu cầu thiết kế:
- Xây dựng base gRPC client theo bộ khung chuẩn đã cung cấp
- Hỗ trợ System service (BranchService) và các service khác trong tương lai
- Tích hợp với hệ thống authentication và logging hiện có
- Tuân thủ pattern chuẩn của Flex system

[X] Implementation completed:
1. ✅ Cập nhật project file với Grpc.Net.ClientFactory và OpenTelemetry packages
2. ✅ Cập nhật appsettings.json với cấu hình gRPC chi tiết
3. ✅ Tạo các interceptor: ClientLoggingInterceptor, AuthHeaderInterceptor, CorrelationIdInterceptor
4. ✅ Cập nhật ServiceExtensions.cs để đăng ký gRPC clients
5. ✅ Tạo SystemGateway service để gọi BranchService
6. ✅ Tích hợp health check cho gRPC services
7. ✅ Tạo test controller và Python test script
8. ✅ Cập nhật Flex.System.Api.csproj để include tất cả proto files
9. ✅ Sửa namespace trong Common proto files từ MyBank thành Flex

[X] Các thành phần chính đã triển khai:
1. ✅ gRPC Client Factory với DI container
2. ✅ Interceptors cho logging, auth, correlation ID
3. ✅ Retry policy với exponential backoff
4. ✅ HTTP/2 support với keepalive và connection pooling
5. ✅ TLS security cho tất cả gRPC calls
6. ✅ Health check cho gRPC services
7. ✅ OpenTelemetry integration cho tracing và metrics
8. ✅ Error handling với domain exceptions
9. ✅ Test endpoints và Python test script
10. ✅ Documentation đầy đủ
11. ✅ Proto files configuration đúng namespace

Notes:
- Base gRPC client đã được triển khai hoàn chỉnh theo bộ khung chuẩn
- Hỗ trợ System service với BranchService
- Tích hợp với JWT authentication và Flex.SeriLog
- Tuân thủ pattern chuẩn của Flex system
- Sẵn sàng để mở rộng cho các service khác
- Có test script Python để kiểm tra functionality
- Documentation đầy đủ cho development và maintenance
- Proto files đã được cập nhật với namespace Flex.Contracts.Common
- Flex.System.Api.csproj đã include tất cả proto files cần thiết

# Fix: UserService BranchName Integration

[X] Đã sửa lỗi BranchName trong UserService:
1. ✅ Cập nhật UserService để inject IBranchIntegrationService
2. ✅ Sửa method GetUsersPagedAsync để lấy tên branch thực tế từ System service
3. ✅ Sửa method GetUserByUserNameAsync để lấy tên branch thực tế
4. ✅ Thêm error handling và logging cho branch integration
5. ✅ Tạo test script Python để verify kết quả

Implementation details:
- Sử dụng BatchGetBranchesAsync cho GetUsersPagedAsync để tối ưu performance
- Sử dụng GetBranchByCodeAsync cho GetUserByUserNameAsync
- Có fallback graceful khi không lấy được thông tin branch
- Logging warning khi có lỗi integration với System service
- Test script có thể chạy để verify functionality

# Fix: gRPC System Service IDs Integration

[X] Đã sửa gRPC System service để sử dụng ids thay vì codes:
1. ✅ Cập nhật IBranchIntegrationService để sử dụng long ids thay vì string codes
2. ✅ Cập nhật BranchGrpcService để convert ids thành codes cho gRPC calls
3. ✅ Cập nhật BranchDto để sử dụng long Id thay vì string Code
4. ✅ Cập nhật UserService để sử dụng BranchId trực tiếp không cần convert
5. ✅ Cập nhật cache để sử dụng long keys thay vì string keys

Implementation details:
- gRPC proto vẫn sử dụng codes (string) để không phá vỡ contract
- BranchGrpcService convert ids thành codes khi gọi gRPC
- Map kết quả từ codes về ids khi trả về
- Cache sử dụng long keys để tối ưu performance
- Type safety tốt hơn với long ids thay vì string codes
- Không cần string conversion trong UserService

# Fix: System Service GetBranchesByIdsAsync Method

[X] Đã thêm method GetBranchesByIdsAsync vào System service:
1. ✅ Thêm method GetBranchesByIdsAsync(IEnumerable<long> ids) vào BranchService
2. ✅ Cập nhật IBranchService interface với cả hai methods:
   - GetBranchesByCodesAsync(IEnumerable<string> codes)
   - GetBranchesByIdsAsync(IEnumerable<long> ids)
3. ✅ Cập nhật gRPC controller để sử dụng GetBranchesByIdsAsync
4. ✅ Cập nhật logging để rõ ràng hơn về việc sử dụng ids

Implementation details:
- System service giờ hỗ trợ cả codes và ids
- gRPC sử dụng ids trực tiếp (proto đã được cập nhật)
- Identity service sử dụng ids trực tiếp không cần convert
- Cache và performance được tối ưu với long keys
- Type safety được cải thiện với long ids

# Fix: Compilation Errors Resolution

[X] Đã sửa tất cả compilation errors:
1. ✅ CS0029: Sửa BranchDetailDto.Id từ long? thành long
2. ✅ CS0266: Sửa nullable long conversion trong gRPC service
3. ✅ CS1503: Sửa type mismatch trong gRPC calls
4. ✅ CS0535: Sửa interface implementation mismatch
5. ✅ CS1503: Sửa type mismatch trong Identity service

Implementation details:
- Proto file đã được cập nhật để sử dụng int64 (long) thay vì string
- gRPC flow giờ sử dụng ids trực tiếp từ đầu đến cuối
- Không cần conversion giữa ids và codes
- Type safety được đảm bảo hoàn toàn
- Performance được cải thiện đáng kể

# Playbook: Luồng triển khai chức năng quản lý (ví dụ: User)

- Mục tiêu: Chuẩn hoá quy trình thêm một module quản lý theo mô hình maker-checker, tái sử dụng tối đa hạ tầng sẵn có.

- 1) Entities
  - Khai báo entity chính: `<Entity>` (ví dụ `User`). Không dùng DataAnnotations; ràng buộc bằng FluentValidation/EF Fluent API.
  - Khai báo entity yêu cầu duyệt: `<Entity>Request : RequestBase<long>` (ví dụ `UserRequest`).

- 2) EF Core Configurations
  - `<Entity>Configuration : IEntityTypeConfiguration<...>`: đặt tên bảng UPPER_SNAKE_CASE số nhiều (ví dụ `USERS`), cấu hình cột/kiểu dữ liệu, index, quan hệ.
  - `<Entity>RequestConfiguration : RequestBaseConfiguration<<Entity>Request, long>`: `builder.ToTable("<ENTITY>_REQUESTS")` (ví dụ `USER_REQUESTS`).
  - Tận dụng `RequestBaseConfiguration` để map sẵn các cột chung: `ACTION`, `STATUS`, `REQUESTED_DATA`, `MAKER_ID`, `REQUESTED_DATE`, ...

- 3) DbContext
  - Thêm `DbSet<<Entity>>` và `DbSet<<Entity>Request>` nếu cần truy vấn trực tiếp; `ApplyConfigurationsFromAssembly` sẽ tự áp dụng cấu hình.

- 4) Repository
  - Interface: `I<Entity>Repository` (mở rộng theo nhu cầu nghiệp vụ) và/hoặc `I<Entity>RequestRepository` nếu cần thao tác riêng.
  - Implementation: kế thừa `RepositoryBase<TEntity, TKey, IdentityDbContext>` (ví dụ `RepositoryBase<UserRequest, long, IdentityDbContext>`).

- 5) DTOs & Validators
  - Tạo DTO cho create/update/delete/query. Chỉ dùng FluentValidation (không trộn DataAnnotations).
  - Quy ước: Request DTO cho maker tạo pending; Approved/Immediate DTO cho thao tác không cần duyệt.

- 6) Service (Application layer)
  - Interface: `I<Entity>Service` (và `I<Entity>AdminService` nếu tách CRUD immediate vs admin).
  - Thực thi maker-checker: thao tác cần duyệt -> ghi `<Entity>Request`; thao tác immediate -> dùng repository/manager thực thi trực tiếp.
  - Sử dụng `UserManager`/`RoleManager` cho entity thuộc Identity khi cần.

- 7) Controller (API)
  - Route: `api/<entities>`; gắn policy theo `Permissions.<AREA>.<ACTION>` (ví dụ `USERS.READ`, `USERS.CREATE`, ...).
  - Expose endpoint cho CRUD, approve/reject (nếu có request), các thao tác đặc thù (ví dụ assign-roles, lock/unlock...).

- 8) Đăng ký DI
  - `ServiceExtensions.AddInfrastructureServices`: `services.AddScoped<I<Entity>Service, EntityService>();`
  - Đăng ký repository tương ứng; AutoMapper profile; validators `AddValidatorsFromAssembly` nếu áp dụng.
  - Đảm bảo `AddEntityFrameworkStores<IdentityDbContext>()` cho các entity Identity.

- 9) Migration & Tên bảng/kiểu dữ liệu
  - Chuẩn hoá bảng: UPPER_SNAKE_CASE số nhiều; bảng request: `<ENTITY>_REQUESTS`.
  - Áp dụng converter nếu cần (ví dụ boolean -> `CHAR(1)` Y/N).
  - Tạo migration, chạy migrate trong pipeline khởi động.

- 10) Bổ sung
  - Logging/Audit cho thao tác admin; rate limit các endpoint nhạy cảm; 2FA nếu cần.
  - Mapping AutoMapper từ DTO -> entity/request và ngược lại.

- Gợi ý cấu trúc file (ví dụ trong Identity module)
  - `Entities/<Entity>.cs`, `Entities/<Entity>Request.cs`
  - `Persistence/Configurations/<Entity>Configuration.cs`, `.../<Entity>RequestConfiguration.cs`
  - `Repositories/Interfaces/I<Entity>Repository.cs`, `Repositories/<Entity>Repository.cs`
  - `Services/I<Entity>Service.cs`, `Services/<Entity>Service.cs`
  - `Controllers/<Entity>Controller.cs`

## Quy trình triển khai Service mới

### Bước 1: Tạo cấu trúc thư mục
1. Tạo thư mục `src/Services/[ServiceName]/`
2. Tạo project `Flex.[ServiceName].Api`
3. Tạo cấu trúc thư mục con theo pattern

### Bước 2: Cấu hình Project file
1. Sử dụng .NET 9.0
2. Thêm các package cần thiết
3. Thêm project references

### Bước 3: Tạo Extensions
1. **ServiceExtensions.cs**: Cấu hình DI và services
2. **ApplicationExtensions.cs**: Cấu hình middleware pipeline
3. **HostExtensions.cs**: Cấu hình host (nếu cần)

### Bước 4: Cấu hình Program.cs
1. Sử dụng pattern chuẩn với try-catch-finally
2. Sử dụng Flex.SeriLog
3. Gọi các extension methods theo thứ tự

### Bước 5: Cấu hình appsettings
1. `appsettings.json`: Cấu hình chung
2. `appsettings.Development.json`: Cấu hình development

### Bước 6: Thêm vào Solution
1. Thêm project vào Flex.sln
2. Cấu hình dependencies

## Lưu ý quan trọng

### 1. Naming Convention
- Service name: PascalCase (ví dụ: Flex.System.Api)
- Namespace: `Flex.[ServiceName].Api`
- Extensions namespace: `Flex.[ServiceName].Api.Extensions`

### 2. Dependencies
- Luôn sử dụng Flex.SeriLog thay vì Serilog trực tiếp
- Sử dụng Flex.Infrastructure packages
- Reference Flex.Shared cho common functionality

### 3. Error Handling
- Sử dụng ErrorWrappingMiddleware
- Xử lý StopTheHostException
- Logging với correlation ID

### 4. Configuration
- Sử dụng AddAppConfigurations pattern
- Bind settings trong AddConfigurationSettings
- Environment-specific configuration

### 5. Middleware Order
1. SerilogRequestLogging
2. ErrorWrappingMiddleware
3. HttpsRedirection
4. Authentication
5. Authorization
6. Routing
7. Endpoints

## Template sẵn sàng

Có thể copy từ Flex.System.Api hoặc Flex.Investor.Api làm template cơ bản và customize theo nhu cầu cụ thể của service mới.