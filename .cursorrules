# ================================
# Cursor Rules for Flex Microservice - .NET 9 + Microservices
# ================================
version: 2

# ----------------
# GENERAL CONTEXT
# ----------------
context:
  description: |
    Flex Microservice là hệ thống quản lý chứng khoán theo kiến trúc microservices, sử dụng .NET 9, 
    được thiết kế để xử lý giao dịch chứng khoán real-time, quản lý danh mục đầu tư, streaming dữ liệu thị trường. 
    Hệ thống bao gồm các service độc lập: Securities, Investor, Identity, Ordering, Inventory, System, Basket, 
    và các building blocks chung như Infrastructure, Shared, Contracts.
  conventions: |
    - Tên service viết PascalCase với prefix "Flex." (ví dụ: Flex.Securities.Api)
    - Tên container viết thường, phân tách bằng dấu gạch (ví dụ: securities-api)
    - Tên volumes kết thúc bằng _data (ví dụ: securities_data)
    - Sử dụng biến môi trường cho thông tin nhạy cảm (connection strings, passwords)
    - Images phải chỉ định version cụ thể (.NET 9.0)
    - Sử dụng docker-compose.override.yml cho cấu hình local/dev

# ----------------
# BACKEND RULES
# ----------------
backend:
  framework: ".NET 9.0 (latest LTS)"
  architecture: |
    - Microservices: mỗi service là một container riêng biệt
    - Building Blocks: Infrastructure, Shared, Contracts, EventBus.Messages
    - Modules: Security, Redis, SeriLog, Swashbuckle, EntityFrameworkCore
    - Services: Securities, Investor, Identity, Ordering, Inventory, System, Basket, Job
    - API Gateway: Ocelot cho routing và load balancing
  naming_conventions: |
    - Tên container: trùng với tên service, viết thường (ví dụ: securities-api)
    - Biến môi trường: viết hoa, phân tách bằng dấu gạch dưới (ví dụ: DEFAULT_CONNECTION)
    - Tên project: Flex.{ServiceName}.{Layer} (ví dụ: Flex.Securities.Api)
  patterns: |
    - Sử dụng docker-compose để orchestration
    - Sử dụng volumes để persist dữ liệu
    - Sử dụng environment variables cho cấu hình động
    - Entity Framework Core với Oracle database
    - Redis cho caching
    - SeriLog cho logging
    - Swagger cho API documentation

# ----------------
# SERVICES STRUCTURE
# ----------------
services:
  securities: |
    - Flex.Securities.Api: API chính cho quản lý chứng khoán
    - Port: 5000 (Docker), 7001 (Development)
    - Database: Oracle với Entity Framework Core
    - Features: Trade processing, portfolio management, market data
  investor: |
    - Flex.Investor.Api: API quản lý nhà đầu tư
    - Port: 7003 (Development)
    - Features: Investor profiles, account management
  identity: |
    - Flex.IdentityServer.Api: Identity Server với Duende
    - Flex.AspNetIdentity.Api: ASP.NET Core Identity
    - Port: 7002 (IdentityServer), 7102 (AspNetIdentity)
    - Features: Authentication, authorization, user management
  ordering: |
    - Flex.Ordering.Api: API quản lý đơn hàng
    - Flex.Ordering.Domain: Domain layer
    - Flex.Ordering.Application: Application layer
    - Flex.Ordering.Infrastructure: Infrastructure layer
    - Port: 7004 (Development)
    - Features: Order processing, workflow management
  inventory: |
    - Flex.Inventory.Api: API quản lý kho
    - Flex.Inventory.Grpc: gRPC service
    - Port: 7005 (API), 7006 (gRPC)
    - Features: Stock management, inventory tracking
  system: |
    - Flex.System.Api: API quản lý hệ thống
    - Port: 7007 (Development)
    - Features: System configuration, health checks
  basket: |
    - Flex.Basket.Api: API giỏ hàng
    - Port: 7008 (Development)
    - Features: Shopping cart functionality
  job: |
    - Flex.EmailJob.Api: Background job service
    - Port: 7009 (Development)
    - Features: Email processing, scheduled tasks

# ----------------
# BUILDING BLOCKS
# ----------------
building_blocks: |
  - Flex.Infrastructure: Common infrastructure components
  - Flex.Shared: Shared DTOs, enums, constants
  - Flex.Contracts: Domain contracts and interfaces
  - Flex.EventBus.Messages: Event bus message definitions
  - Flex.Shared.Authorization: Authorization constants and permissions
  - Flex.Grpc.Protos: gRPC protocol buffer definitions
  - Flex.Common.Logging: Common logging components

# ----------------
# MODULES
# ----------------
modules: |
  - Flex.Security: JWT authentication, token management
  - Flex.Redis: Redis caching and session management
  - Flex.SeriLog: Structured logging with Serilog
  - Flex.Swashbuckle: Swagger/OpenAPI documentation
  - Flex.EntityFrameworkCore: Entity Framework Core extensions
  - Flex.EntityFrameworkCore.Oracle: Oracle database provider
  - Flex.Hangfire: Background job processing
  - Flex.MediaR: CQRS pattern implementation
  - Flex.DependencyInjection: DI container configuration
  - Flex.Data: Database connection management

# ----------------
# DEVOPS RULES
# ----------------
devops:
  deployment: |
    - Sử dụng docker-compose để deploy toàn bộ môi trường
    - Sử dụng docker-compose.override.yml cho cấu hình local/dev
    - Port mapping rõ ràng, tránh trùng lặp
    - Sử dụng Jenkins pipeline cho CI/CD
    - Terraform cho infrastructure provisioning
  ci_cd: |
    - Jenkins pipeline cho build, test, deploy
    - Docker images với .NET 9.0 runtime
    - Automated testing với unit tests
    - Secrets management cho thông tin nhạy cảm

# ----------------
# TESTING RULES
# ----------------
testing: |
  - Viết unit test cho từng service
  - Integration test với database containers
  - API testing với Swagger/OpenAPI
  - Performance testing cho high-load scenarios

# ----------------
# FILE & FOLDER STRUCTURE
# ----------------
file_structure: |
  - docker-compose.yml: chỉ lưu image kèm version/tag cho từng service
  - docker-compose.override.yml: cấu hình bổ sung cho môi trường local/dev
  - src/Services/: chứa các microservices
  - src/BuildingBlocks/: chứa các shared components
  - src/Modules/: chứa các reusable modules
  - src/ApiGateways/: chứa API Gateway
  - src/WebApps/: chứa web applications
  - volumes đặt tên theo convention: <service>_data
  - Mỗi service có cấu trúc: Api, Domain, Application, Infrastructure (nếu cần)

# ----------------
# DATABASE & INFRASTRUCTURE
# ----------------
infrastructure: |
  - Database: Oracle với Entity Framework Core
  - Cache: Redis cho session và caching
  - Message Broker: RabbitMQ (được đề cập trong docs)
  - API Gateway: Ocelot cho routing
  - Monitoring: Health checks và logging
  - Security: JWT tokens, Identity Server

# ----------------
# DEVELOPMENT GUIDELINES
# ----------------
development: |
  - Sử dụng .NET 9.0 SDK
  - Follow CQRS pattern với MediatR
  - Implement proper logging với Serilog
  - Use AutoMapper cho object mapping
  - Implement proper error handling và validation
  - Follow RESTful API conventions
  - Use async/await patterns
  - Implement proper dependency injection

# ----------------
# PAGING PATTERNS
# ----------------
paging_patterns: |
  ## Standard Paging Method Structure
  ```csharp
  /// <summary>
  /// Get all [EntityName] with pagination.
  /// </summary>
  public async Task<PagedResult<[EntityName]ListItemDto>> Get[EntityName]PagedAsync(Get[EntityName]PagingRequest request)
  {
      // ===== Process request parameters =====
      var keyword = request?.Keyword?.Trim().ToLower();
      var status = request?.IsActive?.Trim().ToUpper() == "Y" ? true : false;
      int pageIndex = Math.Max(1, request.PageIndex ?? 1);
      int pageSize = Math.Max(1, request.PageSize ?? 10);

      // ===== Build query =====
      var query = _context.[EntityName]s
          .WhereIf(!string.IsNullOrEmpty(keyword),
              x => EF.Functions.Like(x.Code.ToLower(), $"%{keyword}%") ||
                   EF.Functions.Like(x.Description.ToLower(), $"%{keyword}%"))
          .WhereIf(!string.IsNullOrEmpty(request.IsActive), x => x.IsActive == status);

      // ===== Execute query =====
      var total = await query.CountAsync();
      var items = await query
          .OrderBy(x => x.Id)
          .Skip((pageIndex - 1) * pageSize)
          .Take(pageSize)
          .Select(x => new [EntityName]ListItemDto
          {
              Code = x.Code,
              Name = x.Name,
              Description = x.Description,
              IsActive = x.IsActive
          })
          .ToListAsync();

      // ===== Return result =====
      return PagedResult<[EntityName]ListItemDto>.Create(pageIndex, pageSize, total, items);
  }
  ```

  ## Paging Rules & Conventions
  - **Method Naming**: Get[EntityName]PagedAsync hoặc Get[EntityName]ApprovedPagedAsync
  - **Parameter Validation**: Luôn validate và set default values cho pageIndex, pageSize
  - **Keyword Search**: Sử dụng EF.Functions.Like cho case-insensitive search
  - **Status Filter**: Convert string "Y"/"N" thành boolean
  - **Query Structure**: 
    - Process parameters → Build query → Execute query → Return result
  - **Comments**: Sử dụng comment blocks với "=====" để phân chia rõ ràng
  - **Ordering**: Mặc định OrderBy(x => x.Id) trừ khi có yêu cầu khác
  - **Projection**: Sử dụng Select để map sang DTO trước khi ToListAsync()
  - **Return Type**: Luôn sử dụng PagedResult<T>.Create()

  ## Approved vs Regular Paging
  - **Regular Paging**: Get[EntityName]PagedAsync - lấy tất cả records
  - **Approved Paging**: Get[EntityName]ApprovedPagedAsync - chỉ lấy approved records
  - **Logic Difference**: Chỉ khác ở điều kiện WHERE (IsApproved = true)
  - **Structure**: Giống hệt nhau về style, chỉ khác logic filter

  ## Common Patterns
  - **Keyword Search**: Code, Name, Description fields
  - **Status Filter**: IsActive, IsApproved, IsDeleted fields
  - **Date Range**: CreatedDate, UpdatedDate với FromDate/ToDate
  - **User Filter**: CreatedBy, UpdatedBy với user ID
  - **Category Filter**: CategoryId, TypeId với dropdown values
