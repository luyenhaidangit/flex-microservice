# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python3. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python3 tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python3 tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python3 ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```bash
venv/bin/python3 ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```bash
venv/bin/python3 ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Always use (activate) it when doing python development. First, to check whether 'uv' is available, use `which uv`. If that's the case, first activate the venv, and then use `uv pip install` to install packages. Otherwise, fall back to `pip`.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.
- Không tự tạo seed (permissions/users/roles/…) nếu không có yêu cầu rõ ràng từ PO. Đặc biệt: KHÔNG seed quyền `USERS.*` mặc định trừ khi được yêu cầu.
- Mapping entity: Sử dụng EF Core Fluent API qua `IEntityTypeConfiguration<T>` để định nghĩa bảng/cột/index/quan hệ. KHÔNG dùng DataAnnotations (`[Table]`, `[Column]`, `[StringLength]`, …) trên entity.
- EF Core/Identity entities: không dùng `required` cho property vì framework khởi tạo bằng reflection; dùng `= default!` cho non-null reference và ràng buộc bằng FluentValidation/EF Fluent API (`.IsRequired()` nếu cần schema). Dùng required: cho DTO / domain model mà bạn kiểm soát việc khởi tạo, muốn ép buộc compile-time.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When searching for recent news, use the current year (2025) instead of previous years, or simply use the "recent" keyword to get the latest information

## Project-specific Lessons

- Tránh xung đột tên `PagedResult<>` giữa `Flex.Shared.SeedWork.PagedResult<T>` và `System.Linq.Dynamic.Core.PagedResult<TSource>`: luôn fully-qualify `Flex.Shared.SeedWork.PagedResult<T>` trong chữ ký method hoặc loại bỏ `System.Linq.Dynamic.Core` khỏi `using`. Ưu tiên sử dụng `QueryableExtensions.ToPagedResultAsync(request)` để paging thay vì tự `OrderBy` với Dynamic LINQ khi không cần thiết.
- Không xoá comment cũ nếu thay đổi code không làm thay đổi ý nghĩa comment; chỉ bổ sung comment mới khi cần làm rõ thay đổi. Giữ nguyên các template comment dạng "===== ... =====".
- API không trả dữ liệu phải trả `Ok(Result.Success(message: "..."))` thay vì `NoContent()`.

## Scratchpad Notes
- UserRepository: dùng `ToPagedResultAsync` để tránh Dynamic LINQ và resolve ambiguous `PagedResult<>`.
 - Nếu không có yêu cầu rõ ràng về sort fields, để `OrderByMappings` rỗng trong `PagingRequest` (không map mặc định) nhằm tránh nhầm lẫn về tiêu chí sắp xếp.

# Playbook: Luồng triển khai chức năng quản lý (ví dụ: User)

- Mục tiêu: Chuẩn hoá quy trình thêm một module quản lý theo mô hình maker-checker, tái sử dụng tối đa hạ tầng sẵn có.

- 1) Entities
  - Khai báo entity chính: `<Entity>` (ví dụ `User`). Không dùng DataAnnotations; ràng buộc bằng FluentValidation/EF Fluent API.
  - Khai báo entity yêu cầu duyệt: `<Entity>Request : RequestBase<long>` (ví dụ `UserRequest`).

- 2) EF Core Configurations
  - `<Entity>Configuration : IEntityTypeConfiguration<...>`: đặt tên bảng UPPER_SNAKE_CASE số nhiều (ví dụ `USERS`), cấu hình cột/kiểu dữ liệu, index, quan hệ.
  - `<Entity>RequestConfiguration : RequestBaseConfiguration<<Entity>Request, long>`: `builder.ToTable("<ENTITY>_REQUESTS")` (ví dụ `USER_REQUESTS`).
  - Tận dụng `RequestBaseConfiguration` để map sẵn các cột chung: `ACTION`, `STATUS`, `REQUESTED_DATA`, `MAKER_ID`, `REQUESTED_DATE`, ...

- 3) DbContext
  - Thêm `DbSet<<Entity>>` và `DbSet<<Entity>Request>` nếu cần truy vấn trực tiếp; `ApplyConfigurationsFromAssembly` sẽ tự áp dụng cấu hình.

- 4) Repository
  - Interface: `I<Entity>Repository` (mở rộng theo nhu cầu nghiệp vụ) và/hoặc `I<Entity>RequestRepository` nếu cần thao tác riêng.
  - Implementation: kế thừa `RepositoryBase<TEntity, TKey, IdentityDbContext>` (ví dụ `RepositoryBase<UserRequest, long, IdentityDbContext>`).

- 5) DTOs & Validators
  - Tạo DTO cho create/update/delete/query. Chỉ dùng FluentValidation (không trộn DataAnnotations).
  - Quy ước: Request DTO cho maker tạo pending; Approved/Immediate DTO cho thao tác không cần duyệt.

- 6) Service (Application layer)
  - Interface: `I<Entity>Service` (và `I<Entity>AdminService` nếu tách CRUD immediate vs admin).
  - Thực thi maker-checker: thao tác cần duyệt -> ghi `<Entity>Request`; thao tác immediate -> dùng repository/manager thực thi trực tiếp.
  - Sử dụng `UserManager`/`RoleManager` cho entity thuộc Identity khi cần.

- 7) Controller (API)
  - Route: `api/<entities>`; gắn policy theo `Permissions.<AREA>.<ACTION>` (ví dụ `USERS.READ`, `USERS.CREATE`, ...).
  - Expose endpoint cho CRUD, approve/reject (nếu có request), các thao tác đặc thù (ví dụ assign-roles, lock/unlock...).

- 8) Đăng ký DI
  - `ServiceExtensions.AddInfrastructureServices`: `services.AddScoped<I<Entity>Service, EntityService>();`
  - Đăng ký repository tương ứng; AutoMapper profile; validators `AddValidatorsFromAssembly` nếu áp dụng.
  - Đảm bảo `AddEntityFrameworkStores<IdentityDbContext>()` cho các entity Identity.

- 9) Migration & Tên bảng/kiểu dữ liệu
  - Chuẩn hoá bảng: UPPER_SNAKE_CASE số nhiều; bảng request: `<ENTITY>_REQUESTS`.
  - Áp dụng converter nếu cần (ví dụ boolean -> `CHAR(1)` Y/N).
  - Tạo migration, chạy migrate trong pipeline khởi động.

- 10) Bổ sung
  - Logging/Audit cho thao tác admin; rate limit các endpoint nhạy cảm; 2FA nếu cần.
  - Mapping AutoMapper từ DTO -> entity/request và ngược lại.

- Gợi ý cấu trúc file (ví dụ trong Identity module)
  - `Entities/<Entity>.cs`, `Entities/<Entity>Request.cs`
  - `Persistence/Configurations/<Entity>Configuration.cs`, `.../<Entity>RequestConfiguration.cs`
  - `Repositories/Interfaces/I<Entity>Repository.cs`, `Repositories/<Entity>Repository.cs`
  - `Services/I<Entity>Service.cs`, `Services/<Entity>Service.cs`
  - `Controllers/<Entity>Controller.cs`

# Scratchpad
Goal: Thiết kế API Gateway Flex.Gateway.Yarp cho giao tiếp gRPC

[X] Discovery: Phân tích cấu trúc hiện tại của Flex.Gateway.Yarp và các service gRPC
[X] Analysis: Hiểu yêu cầu thiết kế - API Gateway với YARP hỗ trợ gRPC
[X] Architecture: Thiết kế kiến trúc tổng thể cho Gateway
[X] Implementation: Cấu hình YARP cho routing và load balancing
[X] Security: Thiết kế authentication và authorization
[X] Observability: Tích hợp logging, metrics, tracing
[X] Performance: Tối ưu hiệu năng và scalability
[X] Testing: Chiến lược kiểm thử toàn diện
[X] Documentation: Tài liệu hóa thiết kế và hướng dẫn triển khai
[X] Bug Fixes: Sửa lỗi NuGet packages và dependencies
[X] Standardization: Đồng bộ hóa với pattern của các dự án khác

Progress notes:
[X] Phân tích cấu trúc hiện tại:
- Flex.Gateway.Yarp hiện tại chỉ là template cơ bản với Program.cs đơn giản
- Chưa có YARP package, chỉ có OpenAPI
- Các service gRPC đã được cấu hình (System API có BranchGrpcService)
- Có Flex.Gateway.Ocelot đã được cấu hình với routing cho các service
- Hệ thống có 9 services chính: System, Securities, Ordering, Job, Inventory, Investor, Integration, Identity, Basket
- Identity service có JWT configuration sẵn
- gRPC services được cấu hình trên port 5005 với HTTP/2

[X] Kiến trúc tổng thể:
- Client → Flex.Gateway.Yarp → Microservices (gRPC)
- Gateway làm điểm truy cập duy nhất
- Hỗ trợ SSL termination, authentication tập trung
- Tích hợp với Identity Service cho JWT validation
- Observability với OpenTelemetry

[X] Implementation completed:
- Thêm các package cần thiết: YARP, gRPC, Authentication, OpenTelemetry, Serilog, Rate Limiting
- Cấu hình YARP routing cho tất cả 9 services với HTTP/2 support
- Implement authentication với JWT Bearer token
- Tích hợp OpenTelemetry cho observability
- Tạo middleware cho error handling và logging
- Cấu hình Kestrel cho HTTP/2 và performance optimization
- Tạo GatewayController cho management endpoints
- Tạo Dockerfile cho containerization
- Tạo test script Python để kiểm tra gRPC functionality
- Tạo README với hướng dẫn đầy đủ

[X] Bug Fixes completed:
- Sửa lỗi NuGet package versions không tương thích
- Loại bỏ OpenTelemetry.Instrumentation.GrpcNetClient (không có stable version)
- Loại bỏ OpenTelemetry.Exporter.Prometheus.AspNetCore (không có stable version)
- Cập nhật Microsoft.AspNetCore.RateLimiting sang version có sẵn
- Cập nhật ServiceExtensions và ApplicationExtensions để loại bỏ dependencies không có
- Tạo test script đơn giản hơn không cần protobuf files
- Cập nhật documentation để phản ánh các thay đổi

[X] Standardization completed:
- Đồng bộ Program.cs với pattern của các dự án khác
- Sử dụng Flex.SeriLog thay vì Serilog trực tiếp
- Đổi tên methods: AddGatewayServices → AddInfrastructure, UseGatewayPipeline → UseInfrastructure
- Thêm AddConfigurationSettings method theo pattern
- Đổi tên ConfigureGatewayHost → AddAppConfigurations
- Cập nhật cấu trúc try-catch-finally theo pattern chuẩn
- Thêm reference đến Flex.SeriLog project

[X] Các thành phần chính đã thiết kế:
1. ✅ Routing và Load Balancing với YARP
2. ✅ Authentication & Authorization (JWT, API Key)
3. ✅ Security (HTTPS, Rate Limiting, SSL Termination)
4. ✅ Observability (Logging, Metrics, Distributed Tracing)
5. ✅ Performance Optimization (HTTP/2, Connection Pooling)
6. ✅ CI/CD Pipeline (Dockerfile, Kubernetes manifests)
7. ✅ Testing Strategy (Functional, Performance, Chaos)
8. ✅ Documentation và Deployment Guide
9. ✅ Standardization với pattern của hệ thống

Notes:
- Gateway hỗ trợ routing cho tất cả 9 services với cấu hình HTTP/2
- JWT authentication tích hợp với Identity Service
- OpenTelemetry cho observability với OTLP exporter
- Rate limiting và security features đầy đủ
- Test script Python sẵn sàng để kiểm tra functionality
- Documentation đầy đủ cho development và deployment
- Docker và Kubernetes ready
- Đã sửa tất cả lỗi NuGet packages và dependencies
- Đã đồng bộ hóa hoàn toàn với pattern của các dự án khác trong hệ thống

# Playbook: Triển khai Service mới theo Pattern chuẩn Flex

## Mục tiêu
Chuẩn hoá quy trình tạo service mới trong hệ thống Flex, đảm bảo tính nhất quán và dễ bảo trì.

## Pattern chuẩn cho Service mới

### 1. Cấu trúc thư mục
```
src/Services/[ServiceName]/Flex.[ServiceName].Api/
├── Controllers/
├── Extensions/
│   ├── ApplicationExtensions.cs
│   ├── ServiceExtensions.cs
│   └── HostExtensions.cs (nếu cần)
├── Program.cs
├── appsettings.json
├── appsettings.Development.json
└── Flex.[ServiceName].Api.csproj
```

### 2. Program.cs - Pattern chuẩn
```csharp
using Serilog;
using Flex.SeriLog;
using Flex.[ServiceName].Api.Extensions;

var builder = WebApplication.CreateBuilder(args);
var configuration = builder.Configuration;

builder.AddAppConfigurations();

SeriLogger.Configure(builder);
Log.Information($"Start {builder.Environment.ApplicationName} up");

try
{
    builder.Services.AddConfigurationSettings(configuration);
    builder.Services.AddInfrastructure(configuration);

    var app = builder.Build();

    app.UseInfrastructure();

    app.Run();
}

catch (Exception ex)
{
    string type = ex.GetType().Name;
    if (type.Equals("StopTheHostException", StringComparison.Ordinal)) throw;

    Log.Fatal(ex, $"Unhandled exception: {ex.Message}");
}
finally
{
    Log.Information($"Shutdown {builder.Environment.ApplicationName} complete");
    Log.CloseAndFlush();
}
```

### 3. ServiceExtensions.cs - Pattern chuẩn
```csharp
namespace Flex.[ServiceName].Api.Extensions
{
    public static class ServiceExtensions
    {
        public static IServiceCollection AddConfigurationSettings(this IServiceCollection services, IConfiguration configuration)
        {
            // Bind configuration settings nếu cần
            return services;
        }

        public static IServiceCollection AddInfrastructure(this IServiceCollection services, IConfiguration configuration)
        {
            // Add services to the container.
            services.AddControllers().ApplyJsonSettings();

            services.AddEndpointsApiExplorer();

            services.ConfigureSwagger();

            services.ConfigureRouteOptions();
            services.ConfigureValidationErrorResponse();

            // Register services DI container
            services.AddInfrastructureServices();

            // Database (nếu cần)
            services.ConfigureServiceDbContext<[ServiceName]DbContext>(configuration);

            // AutoMapper
            services.AddAutoMapper(AssemblyReference.Assembly);

            // Http Accessor
            services.AddHttpContextAccessor();

            // Grpc (nếu cần)
            services.AddGrpc();

            return services;
        }

        #region Infrastructure
        private static IServiceCollection AddInfrastructureServices(this IServiceCollection services)
        {
            // Register repositories, services, etc.
            return services;
        }
        #endregion
    }
}
```

### 4. ApplicationExtensions.cs - Pattern chuẩn
```csharp
using Flex.Infrastructure.Middlewares;
using Serilog;

namespace Flex.[ServiceName].Api.Extensions
{
    public static class ApplicationExtensions
    {
        public static void UseInfrastructure(this WebApplication app)
        {
            // Configure the HTTP request pipeline.
            if (app.Environment.IsDevelopment())
            {
                app.MapOpenApi();
            }

            // Logging
            app.UseSerilogRequestLogging();

            app.UseMiddleware<ErrorWrappingMiddleware>();

            app.UseHttpsRedirection();

            app.UseAuthentication();
            app.UseAuthorization();

            app.UseRouting();

            // Grpc (nếu cần)
            app.MapGrpcService<[ServiceName]GrpcService>();

            app.MapControllers();
        }
    }
}
```

### 5. HostExtensions.cs - Pattern chuẩn (nếu cần)
```csharp
namespace Flex.[ServiceName].Api.Extensions
{
    public static class HostExtensions
    {
        public static void AddAppConfigurations(this WebApplicationBuilder builder)
        {
            var env = builder.Environment;

            // Adds application configurations from JSON files and environment variables.
            builder.Configuration
               .AddJsonFile("appsettings.json", optional: false, reloadOnChange: true)
               .AddJsonFile($"appsettings.{env.EnvironmentName}.json", optional: true, reloadOnChange: true)
               .AddEnvironmentVariables();
        }
    }
}
```

### 6. Project file - Pattern chuẩn
```xml
<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>net9.0</TargetFramework>
    <Nullable>enable</Nullable>
    <ImplicitUsings>enable</ImplicitUsings>
  </PropertyGroup>

  <ItemGroup>
    <!-- Core packages -->
    <PackageReference Include="Microsoft.AspNetCore.OpenApi" Version="9.0.6" />
    
    <!-- Infrastructure packages -->
    <PackageReference Include="Flex.Infrastructure" Version="1.0.0" />
    <PackageReference Include="Flex.Infrastructure.EntityFrameworkCore" Version="1.0.0" />
    <PackageReference Include="Flex.Infrastructure.EntityFrameworkCore.Oracle" Version="1.0.0" />
    <PackageReference Include="Flex.Infrastructure.Redis" Version="1.0.0" />
    <PackageReference Include="Flex.Infrastructure.Swashbuckle" Version="1.0.0" />
    
    <!-- Shared packages -->
    <PackageReference Include="Flex.Shared" Version="1.0.0" />
    
    <!-- Module packages -->
    <PackageReference Include="Flex.SeriLog" Version="1.0.0" />
  </ItemGroup>

  <ItemGroup>
    <!-- Project references -->
    <ProjectReference Include="..\..\BuildingBlocks\Flex.Shared\Flex.Shared.csproj" />
    <ProjectReference Include="..\..\Modules\Flex.SeriLog\Flex.SeriLog.csproj" />
  </ItemGroup>

</Project>
```

## Quy trình triển khai Service mới

### Bước 1: Tạo cấu trúc thư mục
1. Tạo thư mục `src/Services/[ServiceName]/`
2. Tạo project `Flex.[ServiceName].Api`
3. Tạo cấu trúc thư mục con theo pattern

### Bước 2: Cấu hình Project file
1. Sử dụng .NET 9.0
2. Thêm các package cần thiết
3. Thêm project references

### Bước 3: Tạo Extensions
1. **ServiceExtensions.cs**: Cấu hình DI và services
2. **ApplicationExtensions.cs**: Cấu hình middleware pipeline
3. **HostExtensions.cs**: Cấu hình host (nếu cần)

### Bước 4: Cấu hình Program.cs
1. Sử dụng pattern chuẩn với try-catch-finally
2. Sử dụng Flex.SeriLog
3. Gọi các extension methods theo thứ tự

### Bước 5: Cấu hình appsettings
1. `appsettings.json`: Cấu hình chung
2. `appsettings.Development.json`: Cấu hình development

### Bước 6: Thêm vào Solution
1. Thêm project vào Flex.sln
2. Cấu hình dependencies

## Lưu ý quan trọng

### 1. Naming Convention
- Service name: PascalCase (ví dụ: Flex.System.Api)
- Namespace: `Flex.[ServiceName].Api`
- Extensions namespace: `Flex.[ServiceName].Api.Extensions`

### 2. Dependencies
- Luôn sử dụng Flex.SeriLog thay vì Serilog trực tiếp
- Sử dụng Flex.Infrastructure packages
- Reference Flex.Shared cho common functionality

### 3. Error Handling
- Sử dụng ErrorWrappingMiddleware
- Xử lý StopTheHostException
- Logging với correlation ID

### 4. Configuration
- Sử dụng AddAppConfigurations pattern
- Bind settings trong AddConfigurationSettings
- Environment-specific configuration

### 5. Middleware Order
1. SerilogRequestLogging
2. ErrorWrappingMiddleware
3. HttpsRedirection
4. Authentication
5. Authorization
6. Routing
7. Endpoints

## Template sẵn sàng

Có thể copy từ Flex.System.Api hoặc Flex.Investor.Api làm template cơ bản và customize theo nhu cầu cụ thể của service mới.